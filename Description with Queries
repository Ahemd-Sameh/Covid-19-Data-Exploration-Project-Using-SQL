Description
This project involves the exploration and analysis of COVID-19 data using various SQL techniques. The goal was to derive 
meaningful insights from the dataset, such as the infection and death rates across different locations, and the vaccination 
progress. The analysis was conducted using a combination of SQL queries that employed skills like joins, common table 
expressions (CTEs), temporary tables, window functions, aggregate functions, creating views, and data type conversions.

Steps and Skills Demonstrated
1. Initial Data Selection and Preparation
   Task: Select initial data to understand its structure.
   SQL Techniques: Basic `SELECT` statements and filtering with `WHERE` clause.
   Code:
        Select Location, date, total_cases, new_cases, total_deaths, population
        From PortfolioProject..CovidDeaths
        Where continent is not null 
        order by 1,2

2. Calculating Death Percentage
   Task: Calculate the likelihood of dying if infected with Covid-19.
   SQL Techniques: Arithmetic operations and filtering.
   Code:
        Select Location, date, total_cases, total_deaths, (total_deaths/total_cases)*100 as DeathPercentage
        From PortfolioProject..CovidDeaths
        Where location like '%states%'
        and continent is not null 
        order by 1,2

3. Calculating Infection Percentage
   Task: Determine the percentage of the population infected with Covid-19.
   SQL Techniques: Arithmetic operations.
   Code:
        Select Location, date, Population, total_cases,  (total_cases/population)*100 as PercentPopulationInfected
        From PortfolioProject..CovidDeaths
        order by 1,2

4. Identifying Highest Infection Rates
   Task: Find countries with the highest infection rates relative to their population.
   SQL Techniques: Aggregate functions and GROUP BY clause.
   Code:
        Select Location, Population, MAX(total_cases) as HighestInfectionCount,  Max((total_cases/population))*100 as PercentPopulationInfected
        From PortfolioProject..CovidDeaths
        Group by Location, Population
        order by PercentPopulationInfected desc

5. Identifying Highest Death Counts
   Task: Identify countries with the highest death counts per population.
   SQL Techniques: Aggregate functions and GROUP BY clause.
   Code:
        Select Location, MAX(cast(Total_deaths as int)) as TotalDeathCount
        From PortfolioProject..CovidDeaths
        Where continent is not null 
        Group by Location
        order by TotalDeathCount desc

6. Analysis by Continent
   Task: Show continents with the highest death counts per population.
   SQL Techniques: Aggregate functions and GROUP BY clause.
   Code:
        Select continent, MAX(cast(Total_deaths as int)) as TotalDeathCount
        From PortfolioProject..CovidDeaths
        Where continent is not null 
        Group by continent
        order by TotalDeathCount desc

7. Global Statistics Calculation
   Task: Calculate global total cases, total deaths, and death percentage.
   SQL Techniques: Aggregate functions.
   Code:
        Select SUM(new_cases) as total_cases, SUM(cast(new_deaths as int)) as total_deaths, SUM(cast(new_deaths as int))/SUM(New_Cases)*100 
        as DeathPercentage
        From PortfolioProject..CovidDeaths
        where continent is not null 
        order by 1,2

8. Vaccination Analysis
   Task: Show the percentage of the population that has received at least one Covid-19 vaccine.
   SQL Techniques: Joins, window functions, and converting data types.
   Code:
        Select dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations
        , SUM(CONVERT(int,vac.new_vaccinations)) OVER (Partition by dea.Location Order by dea.location, dea.Date) as RollingPeopleVaccinated
        From PortfolioProject..CovidDeaths dea
        Join PortfolioProject..CovidVaccinations vac
        On dea.location = vac.location
        and dea.date = vac.date
        where dea.continent is not null 
        order by 2,3

9. Using Common Table Expressions (CTEs)
   Task: Perform calculations using CTEs.
   SQL Techniques: CTEs and window functions.
   Code:
        With PopvsVac (Continent, Location, Date, Population, New_Vaccinations, RollingPeopleVaccinated)
        as
        (
        Select dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations
        , SUM(CONVERT(int,vac.new_vaccinations)) OVER (Partition by dea.Location Order by dea.location, dea.Date) as RollingPeopleVaccinated
        From PortfolioProject..CovidDeaths dea
        Join PortfolioProject..CovidVaccinations vac
        On dea.location = vac.location
        and dea.date = vac.date
        where dea.continent is not null 
        )
        Select *, (RollingPeopleVaccinated/Population)*100
        From PopvsVac

10. Using Temporary Tables
    Task: Perform calculations using temporary tables.
    SQL Techniques: Creating and inserting into temporary tables.
    Code:
        DROP Table if exists #PercentPopulationVaccinated
        Create Table #PercentPopulationVaccinated
        (
        Continent nvarchar(255),
        Location nvarchar(255),
        Date datetime,
        Population numeric,
        New_vaccinations numeric,
        RollingPeopleVaccinated numeric
        )
        Insert into #PercentPopulationVaccinated
        Select dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations
        , SUM(CONVERT(int,vac.new_vaccinations)) OVER (Partition by dea.Location Order by dea.location, dea.Date) as RollingPeopleVaccinated
        From PortfolioProject..CovidDeaths dea
        Join PortfolioProject..CovidVaccinations vac
        On dea.location = vac.location
        and dea.date = vac.date
        Select *, (RollingPeopleVaccinated/Population)*100
        From #PercentPopulationVaccinated

11. Creating Views for Future Use
    Task: Create a view to store data for later visualizations.
    SQL Techniques: Creating views.
    Code:
        Create View PercentPopulationVaccinated as
        Select dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations
        , SUM(CONVERT(int,vac.new_vaccinations)) OVER (Partition by dea.Location Order by dea.location, dea.Date) as RollingPeopleVaccinated
        From PortfolioProject..CovidDeaths dea
        Join PortfolioProject..CovidVaccinations vac
        On dea.location = vac.location
        and dea.date = vac.date
        where dea.continent is not null 

Conclusion
This project showcases a comprehensive analysis of COVID-19 data, highlighting my ability to manipulate and analyze data using advanced SQL 
techniques. The insights derived from this analysis could be valuable for public health officials and policymakers in understanding 
the spread and impact of COVID-19, as well as tracking vaccination progress.






















